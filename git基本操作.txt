git安装完成后需要设置
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"

新建版本库（pwd显示当前路径）
$ mkdir learngit
$ cd learngit
$ pwd
/Users/michael/learngit

把这个目录变成git可管理的仓库
$ git init
Initialized empty Git repository in /Users/michael/learngit/.git/

git add命令添加文件到仓库（add可多次使用，添加多个文件）
$ git add readme.txt

git commit命令提交文件到仓库 -m 添加注释
$ git commit -m "wrote a readme file"

git status可查看当前仓库的状态
$ git status

git diff命令查看修改内容
$ git diff readme.txt

git log命令查看历史纪录（加上 --pretty=oneline 查看的记录变为1行）
$ git log

git reset命令回退版本
HEAD表示当前版本 上一个版本就是HEAD^ 上上一个版本就是HEAD^^ 当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
$ git reset --hard HEAD^

git reflog命令可查看命令历史（回退版本后悔时可找到想要的版本）
$ git reflog

git存在暂存区的概念，git add命令就是将内容存进了暂存区，git commit命令才是将内容提交到当前分支

git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别
$ git diff HEAD -- readme.txt 

git checkout -- file可以丢弃工作区的修改
$ git checkout -- readme.txt

git reset HEAD <file>可以把暂存区的修改撤销掉（unstage），重新放回工作区
git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。
$ git reset HEAD readme.txt

git rm命令删除
$ git rm test.txt

要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；

关联后，使用命令git push -u origin master第一次推送master分支的所有内容；

此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

具体操作：
https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013752340242354807e192f02a44359908df8a5643103a00

要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。

Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快

具体操作：
https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001375233990231ac8cf32ef1b24887a5209f83e01cb94b00

git checkout -b创建并切换分支
$ git checkout -b dev

git branch命令查看分支信息
$ git branch

git merge命令用于合并指定分支到当前分支（Fast-forward 快速合并，无冲突）
$ git merge dev

git branch命令删除分支
$ git branch -d dev

（若合并时冲突，需手动解决冲突再合并）
git log --graph 可看到分支合并图
$ git log --graph --pretty=oneline --abbrev-commit

（Fast-forward模式合并后会删除分支信息）
--no -ff可禁用Fast-forward模式
$ git merge --no-ff -m "merge with no-ff" dev

git stash命令可存储当前工作现场（git status显示干净）
$ git stash

git stash list命令查看所有存储的工作现场
$ git stash list

恢复工作现场
①$ git stash apply(并不删除stash内容)
 $ git stash drop(删除stash内容)
②$ git stash pop（恢复工作现场并删除stash内容）

存储多个工作现场可单独恢复
$ git stash apply stash@{0}

git branch -D <name>命令强行删除没有合并过的分支
$ git branch -D feature-vulcan

git remote命令查看远程库信息
$ git remote

显示更详细的远程库信息
$ git remote -v

创建远程库到本地
$ git checkout -b dev origin/dev

合作开发时若同时修改同一个文件，则需要使用git pull命令先拉取最新代码
若拉取失败，则使用
$ git branch --set-upstream-to=origin/dev dev（指定本地dev分支与远程origin/dev分支的链接）
再git pull

rebase（变基）（感觉没什么卵用）
先$ git rebase再$ git log --graph --pretty=oneline --abbrev-commit
rebase操作可以把本地未push的分叉提交历史整理成直线；
rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。
（===只对尚未推送或分享给别人的本地修改执行变基操作清理历史；
  ===从不对已推送至别处的提交执行变基操作）
  
git tag <版本号>新建tag标签
$ git tag v1.0

git status查看所有标签
$ git tag

若不是在最新版本上加标签，则在加签操作后加上commit id
$ git tag v0.9 f52c633

创建带有说明的标签，用-a指定标签名，-m指定说明文字
$ git tag -a v0.1 -m "version 0.1 released" 1094adb

git show <tagname>查看标签信息
$ git show v0.9

注意：标签总是和某个commit挂钩。如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签。

未提交到远程的tag删除
$ git tag -d v0.1

将tag提交到远程仓库
$ git push origin v1.0

一次性提交所有tag到远程仓库
$ git push origin --tags

删除远程仓库的tag分两步
①$ git tag -d v0.9（删除本地tag）
②$ git push origin :refs/tags/v0.9（远程仓库删除）

git remote rm <name>删除已有的远程仓库
$ git remote rm origin

git remote add <name> <address>建立远程仓库连接
$ git remote add origin git@gitee.com:liaoxuefeng/learngit.git

让Git显示颜色
$ git config --global color.ui true

忽略某些文件时，需要编写.gitignore；
.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理

windows新建.gitignore时可使用另存为的操作命名
添加忽略的文件形式时会显示The following paths are ignored by one of your .gitignore files:

若要强制添加则使用 -f
$ git add -f App.class

使用git check-ignore命令查看.gitignore何处忽略
$ git check-ignore -v App.class

配置别名
例子：
$ git config --global alias.st status（别名操作多个单词的命令时用引号框住 etc: $ git config --global alias.last 'log -1'）

配置Git的时候，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。

配置文件放哪了？每个仓库的Git配置文件都放在.git/config文件中

当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中

搭建Git服务器（感觉一般人用不上啊）
https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000

感谢廖老师！

















































